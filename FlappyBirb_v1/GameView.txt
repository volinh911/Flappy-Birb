package com.acesher.flappybirb;

import android.app.Activity;
import android.content.Context;
import android.graphics.*;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.*;
import androidx.annotation.RequiresApi;
import androidx.constraintlayout.solver.widgets.Rectangle;

import java.security.cert.PolicyNode;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

public class GameView extends SurfaceView {

    private Handler handler;
    private Runnable runnable;
    final int UPDATE_MILLIS = 30;
    private Bitmap bg_d;
    private Bitmap baseSprite;
    //private Bitmap birdSprite;
    private SurfaceHolder holder;
    private DisplayMetrics displayMetrics;
    private Base base;

    //BIRB
    Rect rect;
    int dWidth, dHeight;
    private Birb bird;
    private Bitmap[] birbs;
    //integer to keep birb image
    private int birbFrame = 0;
    private int velocity = 0, gravity = 3;
    private int birbX, birbY;
//TUBE
    private Tube tube;
    private Bitmap topTube, bottomTube;
    private boolean gameState = false;
    private int gap = 400; //gap between top tube and bottom tube
    private int minTubeOffset, maxTubeOffset;
    private int No_Tubes = 4;
    private int distance_bet_tubes;
    private int[] tubeX = new int[No_Tubes];
    private int[] topTubeY = new int[No_Tubes];
    private Random random;
    private int tubeVelocity = 8;

//RECTANGLE
    Rectangle topTubeRect;
    Rectangle BottomTubRect;

    //Wanna do a render class but too lazy
    public void render() {
        try { //For catching null reference bullshit
            bg_d = BitmapFactory.decodeResource(getResources(), R.drawable.background_day);
            bg_d = Bitmap.createScaledBitmap(bg_d, displayMetrics.widthPixels,displayMetrics.heightPixels, false);
            baseSprite = BitmapFactory.decodeResource(getResources(), R.drawable.base);
            baseSprite = Bitmap.createScaledBitmap(baseSprite, displayMetrics.widthPixels, (int) (baseSprite.getHeight() * base.getSize()), false);
            //birdSprite = BitmapFactory.decodeResource(getResources(), R.drawable.yellowbird_midflap);
            //birdSprite = Bitmap.createScaledBitmap(birdSprite, (int) (birdSprite.getWidth() * bird.getSize()), (int) (birdSprite.getHeight() * bird.getSize()),false);
            dHeight = bg_d.getHeight();
            dWidth = bg_d.getWidth();
            rect = new Rect(0, 0, dWidth, dHeight);
            birbs = new Bitmap[3];
            birbs[0] = BitmapFactory.decodeResource(getResources(), R.drawable.yellowbird_downflap);
            birbs[0] = Bitmap.createScaledBitmap(birbs[0] , (int) (birbs[0] .getWidth() * bird.getSize()), (int) (birbs[0] .getHeight() * bird.getSize()),false);
            birbs[1] = BitmapFactory.decodeResource(getResources(), R.drawable.yellowbird_midflap);
            birbs[1] = Bitmap.createScaledBitmap(birbs[1] , (int) (birbs[1] .getWidth() * bird.getSize()), (int) (birbs[1] .getHeight() * bird.getSize()),false);
            birbs[2] = BitmapFactory.decodeResource(getResources(), R.drawable.yellowbird_upflap);
            birbs[2] = Bitmap.createScaledBitmap(birbs[2] , (int) (birbs[2] .getWidth() * bird.getSize()), (int) (birbs[2] .getHeight() * bird.getSize()),false);
            //initialize birb position in the centre of the screen
            birbX = dWidth/2 - birbs[0].getWidth()/2;
            birbY = dHeight/2 - birbs[0].getHeight()/2;
        //TUBES
            topTube = BitmapFactory.decodeResource(getResources(), R.drawable.pipe_green_down);
            topTube = Bitmap.createScaledBitmap(topTube , (int) (topTube.getWidth() * tube.getSize()), (int) (topTube .getHeight() * tube.getSize()),false);
            bottomTube = BitmapFactory.decodeResource(getResources(), R.drawable.pipe_green_up);
            bottomTube = Bitmap.createScaledBitmap(bottomTube , (int) (bottomTube.getWidth() * tube.getSize()), (int) (bottomTube .getHeight() * tube.getSize()),false);

            distance_bet_tubes = dWidth * 3/4;
            minTubeOffset = gap/2;
            maxTubeOffset = dHeight - minTubeOffset - gap;

            random = new Random();
            for (int i = 0; i < No_Tubes; i++)
            {
                tubeX[i] = dWidth + i*distance_bet_tubes;
                topTubeY[i] = minTubeOffset + random.nextInt(maxTubeOffset - minTubeOffset + 1);
            }
        }
        catch (Exception e) {
            Log.d("@@@@@@@@@@@@@@@", e.toString());
        }
    }

    //@RequiresApi(api = Build.VERSION_CODES.P)
    public GameView(Context context, DisplayMetrics displayMetrics) {
        super(context);
        this.displayMetrics = displayMetrics;
        bird = new Birb(0, 0, 1.5f);
        base = new Base(0, 0, 1.5f);
        tube = new Tube(0, 0, 1.75f);
        render();

        //bird.updatePos(birdSprite.getWidth(), birdSprite.getHeight());
        base.updatePos(baseSprite.getWidth(), baseSprite.getHeight());

        holder = getHolder();
        holder.addCallback(new SurfaceHolder.Callback() {
            @Override
            public void surfaceDestroyed(SurfaceHolder holder) {
            }

            @Override
            public void surfaceCreated(SurfaceHolder holder) {
                Canvas canvas = holder.lockCanvas();
                if (canvas != null) {
                    draw(canvas);
                    holder.unlockCanvasAndPost(canvas);
                }
            }

            @Override
            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            }

        });

        Log.d("@@@@@@@@@@@@@@@@@@@@@@", "PLEASSE");
        Thread updateGame = new Thread() {
            public void run() {
                new Timer().schedule(new TimerTask() {
                    @Override
                    public void run() {
                        //Will contain a code for spawning pipes
                        update.run();
                    }
                }, 0, 16);
            }
        };

        updateGame.start();

        //handler = Handler.createAsync(Looper.getMainLooper());
        /*runnable = new Runnable() {
            @Override
            public void run() {
                invalidate();
            }
        };*/
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        int action = event.getAction();
        if (action == MotionEvent.ACTION_DOWN)
        {
            //move the birb upward by some units
            velocity = -30;
            gameState = true;
        }
        //indicates that we've done with touch event and no further action is required by Android
        return true;
    }

    Runnable update = new Runnable() { //Apparently, this shit is for updating sprites
        @Override
        public void run() {
            try {
                Canvas canvas = holder.lockCanvas();
                if (canvas != null)
                    draw(canvas);
                canvas.drawBitmap(bg_d, 0, 0, null);
                canvas.drawBitmap(baseSprite, 0, displayMetrics.heightPixels - baseSprite.getHeight(), null);

                if (birbFrame == 0)
                    birbFrame = 1;
                else if (birbFrame == 1)
                    birbFrame = 2;
                else if (birbFrame == 2)
                    birbFrame = 0;

                //The bird should be on the screen
                if (gameState) {
                    if (birbY < dHeight - birbs[0].getHeight() || velocity < 0) //birb does not go beyond the bottom edge of the screen
                    {
                        //when the bird is falling, it gets faster and faster as the velocity value increments by gravity each time
                        velocity += gravity;
                        birbY += velocity;
                    }
                    for (int i = 0; i < No_Tubes; i++)
                    {
                        tubeX[i] -= tubeVelocity;
                        if (tubeX[i] < -topTube.getWidth()) {
                            tubeX[i] += No_Tubes * distance_bet_tubes;
                            topTubeY[i] = minTubeOffset + random.nextInt(maxTubeOffset - minTubeOffset + 1);
                        }
                        canvas.drawBitmap(topTube, tubeX[i], topTubeY[i] - topTube.getHeight(), null);
                        canvas.drawBitmap(bottomTube, tubeX[i], topTubeY[i] + gap, null);
                    }
                }
                //display birb
                canvas.drawBitmap(birbs[birbFrame], birbX, birbY, null);

                holder.unlockCanvasAndPost(canvas);
                handler.postDelayed(runnable, UPDATE_MILLIS);

            } catch (Exception e) {
                Log.d("@@@@@@@@@@@@@@@__", e.getMessage());
            }

        }
    };

    /*@Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawBitmap(bg_d, null, rect, null);


        handler.postDelayed(runnable, UPDATE_MILLIS);
    }*/

}
